Day 1
-	Serverless computing – use cloud, do not use server (outsourcing)
o	You have the ability to tell the cloud to do work
o	You provide the code, then do not have to worry about needing servers, how to do it, etc. 
	It is then the cloud providers problem (ex: Amazon) 

-	Unikernels – take container and make it even smaller 

-	Docker - Docker containers wrap a piece of software in a complete filesystem that contains everything needed to run: code, runtime, system tools, and system libraries – anything that can be installed on a server. 
o	This guarantees that the software will always run the same, regardless of its environment.

-	Microservices – take a big app and chop it into smaller apps 
o	Ex: Target has a store locator, shopping, etc. 
	You would make the store locator its own app so you can update it individually without working on the whole site at once 
	It reduces bugs – if  store locator is down, the rest of the site is still up and running 
	Allows you to scale between smaller servers

-	Devops – bring developers together to get them to work together (vs. pointing fingers) 
o	Taking things that are hard and doing them more often
o	Ex: updates


Day 3
Programming languages - why use one vs. another 
- fast and fun for humans 
	- Ruby - popular for devops 
	- Python - good if you just need to write some scripts to do some automation 
		- Very popular in data science and analytics
		- Python programs ususally connect to programs written in Java that do the "heavy lifting" 
	- Perl - easier to write, nearly impossible to read 
	- JavaScript - only programming language supported by the browser

- Fast, efficient for computers 
	- C++ - C written to be object oriented (ex: code for machinery) 
	- C - write OS in 
		- Unix written on 
	- Usually the foundations for learning other languages

- In the middle 
	- Go 
	- Java - safe and friendly version of C          --- Java & C# still the most popular 
	- C# - Microsoft's chlone of Jave                ---


